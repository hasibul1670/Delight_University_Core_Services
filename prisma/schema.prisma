// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                   String                 @id @default(uuid())
  year                 Int
  title                String
  code                 String
  startMonth           String
  endMonth             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  students             Student[]
  SemesterRegistration SemesterRegistration[]

  @@unique([year, title, code, startMonth, endMonth], name: "unique_academic_semester")
  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@unique([title], name: "unique_academic_faculty")
  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students          Student[]
  faculties         Faculty[]
  OfferedCourse     OfferedCourse[]

  @@unique([title], name: "unique_academic_department")
  @@map("academic_departments")
}

model Student {
  id           String @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middlename   String
  profileImage String
  email        String
  contactNo    String

  gender               String
  bloodGroup           String
  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId   String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  @@unique([email], name: "unique_student")
  @@map("students")
}

model Faculty {
  id                   String             @id @default(uuid())
  facultyId            String
  firstName            String
  lastName             String
  middlename           String
  profileImage         String
  email                String
  contactNo            String
  gender               String
  bloodGroup           String
  designation          String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  CourseFaculty        CourseFaculty[]

  @@unique([email], name: "unique_faculties")
  @@map("faculties")
}

model Room {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id])

  @@unique([roomNumber], name: "unique_room")
  @@map("room")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@unique([title], name: "unique_building")
  @@map("building")
}

model Course {
  id              String                 @id @default(uuid())
  title           String
  code            String
  credits         Int                    @default(0)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  preRequisite    CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")
  faculties       CourseFaculty[]
  offeredCourses  OfferedCourse[]

  @@unique([title], name: "unique_course")
  @@map("courses")
}

model CourseToPrerequisite {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "PrerequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                    String                      @id @default(uuid())
  startDate             DateTime
  endDate               DateTime
  status                SemesterRegistrationStatus? @default(UPCOMING)
  minCredit             Int                         @default(0)
  maxCredit             Int                         @default(0)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  academicSemesterId    String
  academicSemester      AcademicSemester            @relation(fields: [academicSemesterId], references: [id])
  offeredCourses        OfferedCourse[]
  offeredCourseSections OfferedCourseSection[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration   @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections  OfferedCourseSection[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                       String        @id @default(uuid())
  title                    String
  maxCapacity              Int
  currentlyEnrolledStudent Int           @default(0)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  offeredCourseId          String
  offeredCourse            OfferedCourse @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("offered_course_sections")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}
